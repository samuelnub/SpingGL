5 July 2016
	initializer makes window and sets current context to window
	passes this onto game class
	game class will contain all objects that have to exist and need to communicate to each other
	for now, theres a states class instance within this, each instance holds a map of all current states, so one should exist in the game class only
	input class which handles multiple simultaneous inputs

6 July 2016
	going to use xml files to store general data, with tinyxml2 for parsing

7 July 2016
	window now made in game object, game object made by main, so game is the main holder for these objects now
	windower reads xml file for settings, creates defaults based on xmldefaults.h if it doesnt exist
	note to self: font loading is some pretty tedious shiz without another library
	todo: stop trying to use font stash, try to use ftgl, get primitive shaders up, and get freetype2's libraries and includes cause ftgl needs it to build

8 July 2016
	text rendering is still hard :(((
	working on scene graph
	outline of scene component management, meshes, textures and shaders will be loaded once, and any renderable objects will simply provide which mesh, texture and shader they'd want to use to express themselves, with the Renderable object simply containing its world transform, and you can inherit it to add your own attributes eg uniforms to send.

9 July 2016
	textures, meshes and shaders handled in their own managers, and renderables will (TODO) simply refer to what resources they wish to use, only supplying their mat4 model transform as well as other aspects you can inherit off and implement
	to do: Renderables manager (or ActorManager) should have a map (if i can, implement a Slot Map instead), and a "counter" to keep track of instances, as an ID tag, instead of giving retarded string names as keys
	inline functions caused unresolved external symbol errors, wow

10 July 2016
	sorta sorted out the issue of resources, in an inefficient way for now, sorry me, i know, im an idiot
	only pointers to shaders are staged, with each shader having a paired vector of pointers to renderables to which to shade with

11 July 2016
	almost there, just need to properly set up mvp matrices
	for some reason, turning off doublebuffering causes memory access violotation for making a vao lol
	RENDERED SPONGEGAR SUCC
	ADVAncEMENT IN TECHNoLOgY

12 July 2016
	instancing could be done by simply specifying more than one model matrix in the renderable instance
	quaternion camera? ehHHHHHHHHH, gonna redo, really messed up right now
	command class that sends all functions needed when events happen, messy, but better than having input commands hidden in every nook and cranny of this project

13 July 2016
	barebones quaternion camera class, to be used by the eventual player class, needs a lot of refinement in terms of controlling it externally, but the class itself is fully usable

14 July 2016
	refactoring of xml settings handling, a helper "settings" class handles all the xml files needed, will most likely be expanded upon further need. right now it handles grabbing info about graphics and user settings
	
15 July 2016
	basic player class in actor manager, actor manager gets updated every frame in the main loop, and this update function runs through all the actors and calls their update functions
	commands class going to be reserved for system level function calls and stuff, or else its just going to be done on a per-class basis

16 July 2016
	libnoise dependancy for no reason, may remove until needed in the future
	renderables can specify what they wanna be drawn as, triangles, lines or points
	a galaxy generator that i dont know whether it works or not yet lol

17 July 2016
	elliptical galaxy star points wORK, credit due to https://github.com/martindevans/CasualGodComplex for c# implementation
	give a seeded noise module, and the elliptical generator will make a copy and act upon it

18 July 2016
	me from the future writing this so that it appears i made progress on this day, when in fact, i mostly procrastinated

19 July 2016
	reworking on galaxygen class, not much else to say, had some homework, ate some chicken, caught a bellsprout, and yeah

20 July 2016
	got galaxygen class working, i was giving it vec3.length instead of length(vec3), nice one idiot
	horribly unoptimised

21 July 2016
	asthetic tweaks
	might want to change the whole coloring method currently to using another shader, and using layout location 1 (meant to be normals) as color, and providing actual color instead of referencing an image, allows more fine control and smoother gradients
	should focus more on just purely generating spiral galaxies as the only option in generate()
	might work on segmenting individual galaxies into an octree
	stop mucking around and get back to work

25 July 2016
	waddup
	went out for the weekend :(((
	working on universe and galaxy actors, with their classname having the prefix A-, kinda like how UE handles it
	stored meshes and textures made by actors will be stored with a prefix to their class name, eg "AGalaxy", then if it were to be specific, eg galaxy mesh vert data, it would be suffixed with their UUID lecically cast to string, with a hyphen separating them

26 July 2016
	still working on AGalaxy actor, finishing up on it though, may focus on AUniverse tomorrow.
	may utilize multiple framebuffers, handled by APlayer

29 July 2016
	wewlads
	working on refactoring scene class to handle multiple framebuffers
	ps, those shaders have inconsistent #versions lol
	
TODO:
	work on displaying text, if youre smart enough and have the energy to make a good performing ttf font renderer, do it, or else just stick with bitmap fonts
	note to self: procedural texture generation: make a dozen or so random textures at start, and apply a random combination of them and color them differently with the fragment shader to make pseudo unique results
	an example of an actor type: model load actor, specifies model filepath on creation and uses assimp
	try a logarithmic depth buffer for large scales
	trees